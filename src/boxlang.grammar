@precedence {
  // Casting
  cast
  castAs @left

  // Unary
  update @left
  unaryPlus @left
  negate @left
  spread @left

  // Math
  power @right
  times @left
  intdiv @left
  mod @left
  plus @left
  concat @left

  // Bitwise / logic
  bitwise @left
  compare @left
  not @left
  and @left
  or @left
  xor @left
  eqv @left
  imp @left

  // Conditional
  elvis @right
  instanceof
  ternary @right

  // Assignment / pairing
  valuePair
  assign @right

  // Object ops
  array @right
  new @right
  else @right
  scope @left
  typeArgs
  struct @left
  propertyLong
  component

  // Automatic semicolon insertion
  noSemicolon
}

@top Program {
  statement*
}

@top ClassContent {
  classBodyDeclaration*
}

literal {
  IntegerLiteral |
  FloatingPointLiteral |
  @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> |
  CharacterLiteral |
  StringLiteral |
  TextBlock |
  kw<"null"> |
  HashExpression |
  StructLiteral
}

@skip {} {
  TextBlock { textBlockStart textBlockContent* textBlockEnd }
}

expression[@isGroup=Expression] {
  AssignmentExpression |
  BinaryExpression |
  InstanceofExpression |
  CastAsExpression |
  LambdaExpression |
  ClosureExpression |
  TernaryExpression |
  ElvisExpression |
  SpreadExpression |
  UpdateExpression |
  baseExpression |
  UnaryExpression |
  CastExpression
}

CastExpression {
  "(" type ("&" type)* ")" !cast expression
}

AssignmentExpression {
  (Identifier | FieldAccess | SafeFieldAccess | ArrayAccess)
  !assign (AssignOp | "=") expression
}

BinaryExpression {
  expression !compare (op<Compare, "==" | ">=" | "<=" | "!=" | "===" | "!=="> | CompareOp { "<" | ">" } | BoxLangCompareOp | BoxLangContainsOp | BoxLangDoesNotContainOp) expression |
  expression !and (op<Logic, "&&"> | BoxLangLogicOp { kw<"AND"> | kw<"and"> }) expression |
  expression !or (op<Logic, "||"> | BoxLangLogicOp { kw<"OR"> | kw<"or"> }) expression |
  expression !xor BoxLangXorOp expression |
  expression !eqv BoxLangEqvOp expression |
  expression !imp BoxLangImpOp expression |
  expression !power PowerOp { "^" } expression |
  expression !times times expression |
  expression !intdiv IntDivOp { "\\" } expression |
  expression !mod ModOp expression |
  expression !plus op<Arith, "+" | "-"> expression |
  expression !concat StringConcatOp { "&" } expression |
  expression !bitwise BitwiseOp expression
}

BoxLangCompareOp {
  kw<"EQ"> | kw<"eq"> | kw<"Eq"> |
  kw<"NEQ"> | kw<"neq"> | kw<"Neq"> |
  kw<"GT"> | kw<"gt"> | kw<"Gt"> |
  kw<"GTE"> | kw<"gte"> | kw<"Gte"> |
  kw<"LT"> | kw<"lt"> | kw<"Lt"> |
  kw<"LTE"> | kw<"lte"> | kw<"Lte">
}

BoxLangContainsOp {
  kw<"CONTAINS"> | kw<"contains"> | kw<"Contains">
}

BoxLangDoesNotContainOp {
  kw<"does"> kw<"not"> kw<"contain"> |
  kw<"DOES"> kw<"NOT"> kw<"CONTAINS"> |
  kw<"Does"> kw<"Not"> kw<"Contains">
}

BoxLangNotOp {
  kw<"NOT"> | kw<"not"> | kw<"Not">
}

BoxLangXorOp {
  kw<"XOR"> | kw<"xor"> | kw<"Xor">
}

BoxLangEqvOp {
  kw<"EQV"> | kw<"eqv"> | kw<"Eqv">
}

BoxLangImpOp {
  kw<"IMP"> | kw<"imp"> | kw<"Imp">
}

ModOp {
  kw<"MOD"> | kw<"mod"> | kw<"Mod">
}

BitwiseOp {
  "b|" | "b&" | "b^" | "b<<" | "b>>" | "b>>>"
}

InstanceofExpression {
  expression !instanceof kw<"instanceof"> type
}

CastAsExpression {
  expression !castAs kw<"castAs"> type
}

LambdaExpression {
  (Definition | Arguments) "->" (expression | Block)
}

ClosureExpression {
  (Definition | Arguments) "=>" (expression | Block)
}

TernaryExpression {
  expression !ternary op<Logic, "?"> expression ":" expression
}

ElvisExpression {
  expression !elvis ElvisOp { "?:" } expression
}

SpreadExpression {
  SpreadOp { "..." } !spread expression
}

HashExpression {
  "#" expression "#"
}

StructLiteral {
  "{" commaSep1Trailing<StructEntry> "}"
}

StructEntry {
  (Identifier | StringLiteral | ParenthesizedExpression) ":" expression
}

UnaryExpression {
  op<Arith, "+" | "-"> !unaryPlus expression |
  (op<Logic, "!"> | BoxLangNotOp) !negate expression |
  BitwiseComplementOp { "b~" } !negate expression
}

UpdateExpression {
  expression !update op<Update, "--" | "++"> |
  op<Update, "--" | "++"> !update expression
}

baseExpression {
  literal |
  ClassLiteral |
  kw<"this"> |
  Identifier ~identifier |
  ParenthesizedExpression |
  ObjectCreationExpression |
  FieldAccess |
  SafeFieldAccess |
  ArrayAccess |
  ArrayLiteral |
  MethodInvocation |
  MethodReference |
  ArrayCreationExpression
}

ArrayCreationExpression {
  kw<"new"> simpleType
  Dimension { annotation* !array "[" expression? "]" }+
  ArrayInitializer?
}

ParenthesizedExpression {
  "(" expression ")"
}

ClassLiteral {
  unannotatedType "." kw<"class">
}

ObjectCreationExpression {
  unqualifiedObjectCreationExpression |
  baseExpression "." unqualifiedObjectCreationExpression
}

unqualifiedObjectCreationExpression {
  kw<"new"> TypeArguments? simpleType !new ArgumentList ClassBody?
}

FieldAccess {
  (baseExpression | kw<"super">) ("." kw<"super">)? "." anyFieldName
}

SafeFieldAccess {
  (baseExpression | kw<"super">) SafeNavOp { "?." } anyFieldName
}

anyFieldName {
  Identifier
}

ArrayAccess {
  baseExpression "[" expression "]"
}

ArrayLiteral {
  "[" commaSepTrailing<expression> "]"
}

MethodName { Identifier }

MethodInvocation {
  (MethodName |
   (baseExpression | kw<"super">) "." (kw<"super"> ".")? TypeArguments? MethodName)
  ArgumentList
}

ArgumentList {
  "(" commaSep<expression> ")"
}

MethodReference {
  (type | baseExpression | kw<"super">) "::" TypeArguments? (kw<"new"> | Identifier)
}

TypeArguments {
  "<" commaSep<type | Wildcard> ">"
}

Wildcard {
  annotation* "?" wildcardBounds?
}

wildcardBounds {
  kw<"extends"> type |
  kw<"super"> type
}

Dimension {
  annotation* !array "[" "]"
}

statement[@isGroup=Statement] {
  declaration |
  Block |
  ExpressionStatement |
  IfStatement |
  WhileStatement |
  ForStatement |
  EnhancedForStatement |
  ";" |
  AssertStatement |
  SwitchStatement |
  DoStatement |
  BreakStatement |
  ContinueStatement |
  ReturnStatement |
  SynchronizedStatement |
  LocalVariableDeclaration |
  ThrowStatement |
  TryStatement |
  IncludeStatement |
  ParamStatement |
  ComponentStatement
}

Block {
  "{" statement* "}"
}

ExpressionStatement {
  expression ";"
}

AssertStatement {
  kw<"assert"> expression ";" |
  kw<"assert"> expression ":" expression ";"
}

SwitchStatement {
  kw<"switch"> ParenthesizedExpression SwitchBlock
}

SwitchBlock {
  "{" (SwitchLabel | statement)* "}"
}

SwitchLabel {
  kw<"case"> expression ":" |
  kw<"default"> ":"
}

DoStatement {
  kw<"do"> statement kw<"while"> ParenthesizedExpression ";"
}

BreakStatement {
  kw<"break"> ";"
}

ContinueStatement {
  kw<"continue"> ";"
}

ReturnStatement {
  kw<"return"> expression? ";"
}

SynchronizedStatement {
  kw<"synchronized"> ParenthesizedExpression Block
}

ThrowStatement {
  kw<"throw"> expression ";"
}

TryStatement {
  kw<"try"> Block CatchClause* FinallyClause?
}

CatchClause {
  !else kw<"catch"> CatchFormalParameter Block
}

CatchFormalParameter {
  "(" Modifiers? CatchType variableDeclaratorId ")"
}

CatchType {
  unannotatedType ("|" unannotatedType)*
}

FinallyClause {
  kw<"finally"> Block
}

IncludeStatement {
  kw<"include"> IncludeTarget ";"
}

IncludeTarget {
  kw<"template"> "=" expression |
  expression
}

ParamStatement {
  kw<"param"> ParamAttributes ";"
}

FunctionDeclaration {
  Modifiers? ReturnType? kw<"function"> Definition Arguments (Block | ";")
}

ReturnType {
  unannotatedType
}

ComponentStatement {
  ComponentPrefix ComponentName ComponentAttributes ";" |
  ComponentPrefix ComponentName ";"
}

ComponentPrefix {
  kw<"bx"> ":"
}

ComponentName {
  Identifier
}

ComponentAttributes {
  ComponentAttribute+
}

ComponentAttribute {
  ComponentAttributeName "=" expression
}

ComponentAttributeName {
  [@dynamicPrecedence=1] { identifier ~identifier }
}

ParamAttributes {
  commaSep1<ParamAttribute>
}

ParamAttribute {
  ParamName "=" expression
}

ParamName {
  kw<"type"> | kw<"default"> | kw<"required"> | kw<"min"> | kw<"pattern"> | kw<"maxlength"> | kw<"minlength">
}

IfStatement {
  kw<"if"> ParenthesizedExpression statement (!else kw<"else"> statement)?
}

WhileStatement {
  kw<"while"> ParenthesizedExpression statement
}

ForStatement {
  kw<"for">
  ForSpec {
    "(" (LocalVariableDeclaration | commaSep<expression> ";") expression? ";" commaSep<expression> ")"
  }
  statement
}

EnhancedForStatement {
  kw<"for">
  ForSpec {
    "(" Modifiers? unannotatedType variableDeclaratorId ":" expression ")"
  }
  statement
}

annotation {
  MarkerAnnotation |
  Annotation
}

MarkerAnnotation {
  "@" name
}

Annotation {
  "@" name AnnotationArgumentList
}

AnnotationArgumentList {
  "(" (elementValue | commaSep<ElementValuePair>) ")"
}

ElementValuePair {
  Identifier !valuePair "=" elementValue
}

elementValue {
  (expression |
   ElementValueArrayInitializer |
   annotation) !valuePair
}

ElementValueArrayInitializer {
  "{" commaSepTrailing<elementValue> "}"
}

declaration {
  ImportDeclaration |
  ClassDeclaration |
  InterfaceDeclaration |
  AnnotationTypeDeclaration |
  FunctionDeclaration
}

ImportDeclaration {
  kw<"import"> kw<"static">? (ObjectResolverPrefix? name ("." Asterisk)?) ImportAlias? ";"
}

ObjectResolverPrefix {
  (Identifier | StringLiteral) ":"
}

ImportAlias {
  kw<"as"> Identifier
}

ClassDeclaration {
  Modifiers? kw<"class"> Definition? TypeParameters? Superclass? SuperInterfaces? ClassBody
}

Modifiers {
  annotation+ (modifier annotation*)* ~annotations |
  (modifier annotation*)+ ~annotations
}

modifier {
  kw<"public"> | kw<"protected"> | kw<"private"> | kw<"abstract"> | kw<"static"> | kw<"final"> | kw<"strictfp"> |
  kw<"default"> | kw<"synchronized"> | kw<"native"> | kw<"transient"> | kw<"volatile"> | kw<"package"> | kw<"remote">
}

TypeParameters {
  "<" commaSep1<TypeParameter> ">"
}

TypeParameter {
  annotation* Definition TypeBound?
}

TypeBound {
  kw<"extends"> type ("&" type)*
}

Superclass {
  kw<"extends"> type
}

SuperInterfaces {
  kw<"implements"> InterfaceTypeList
}

InterfaceTypeList {
  commaSep1<type>
}

ClassBody {
  "{" classBodyDeclaration* "}"
}

classBodyDeclaration {
  PropertyDeclaration |
  MethodDeclaration |
  FunctionDeclaration |
  ClassDeclaration |
  InterfaceDeclaration |
  AnnotationTypeDeclaration |
  Block |
  StaticInitializer |
  ConstructorDeclaration |
  ";"
}

StaticInitializer {
  kw<"static"> Block
}

ConstructorDeclaration {
  Modifiers? constructorDeclarator Throws? ConstructorBody
}

PropertyDeclaration {
  annotation* kw<"property"> PropertyBody ";"
}

PropertyBody {
  PropertyLongForm { !propertyLong PropertyAttribute+ } |
  PropertyShortForm { unannotatedType? PropertyName (kw<"default"> "=" expression)? }
}

PropertyAttribute {
  PropertyAttributeName "=" PropertyValue
}

PropertyAttributeName {
  kw<"default"> |
  kw<"displayname"> |
  kw<"getter"> |
  kw<"hint"> |
  kw<"required"> |
  kw<"setter"> |
  kw<"serializable"> |
  kw<"type"> |
  Identifier
}

PropertyName {
  Identifier
}

PropertyValue {
  literal | Identifier | MethodInvocation | FieldAccess
}

constructorDeclarator {
  TypeParameters? Definition Arguments
}

ConstructorBody {
  "{" ExplicitConstructorInvocation? statement* "}"
}

ExplicitConstructorInvocation {
  (TypeArguments? (kw<"this"> | kw<"super">) | (baseExpression) "." TypeArguments? kw<"super">) ArgumentList ";"
}

name {
  Identifier |
  ScopedIdentifier
}

ScopedIdentifier {
  name "." Identifier
}

AnnotationTypeDeclaration {
  Modifiers? "@interface" Identifier AnnotationTypeBody
}

AnnotationTypeBody {
  "{" (
    AnnotationTypeElementDeclaration |
    ConstantDeclaration |
    ClassDeclaration |
    InterfaceDeclaration |
    AnnotationTypeDeclaration
  )* "}"
}

AnnotationTypeElementDeclaration {
  Modifiers? unannotatedType Identifier "(" ")" Dimension* defaultValue? ";"
}

defaultValue {
  kw<"default"> elementValue
}

InterfaceDeclaration {
  Modifiers? kw<"interface"> Definition TypeParameters? ExtendsInterfaces? InterfaceBody
}

ExtendsInterfaces {
  kw<"extends"> InterfaceTypeList
}

InterfaceBody {
  "{" (
    ConstantDeclaration |
    MethodDeclaration |
    ClassDeclaration |
    InterfaceDeclaration |
    AnnotationTypeDeclaration |
    ";"
  )* "}"
}

ConstantDeclaration {
  Modifiers? unannotatedType commaSep1<VariableDeclarator> ";"
}

VariableDeclarator {
  variableDeclaratorId ("=" variableInitializer)?
}

variableDeclaratorId {
  Definition Dimension*
}

variableInitializer {
  expression |
  ArrayInitializer
}

ArrayInitializer {
  "{" commaSepTrailing<variableInitializer> "}"
}

type[@isGroup=Type] {
  unannotatedType |
  AnnotatedType { annotation+ unannotatedType }
}

unannotatedType {
  ~annotations simpleType |
  ArrayType
}

simpleType {
  kw<"void"> |
  @specialize[@name=PrimitiveType]<identifier, "byte" | "short" | "int" | "long" | "char" | "float" | "double" | "boolean" | "any" | "string" | "numeric" | "array" | "struct" | "query" | "date" | "component" | "number"> |
  TypeName |
  ScopedTypeName |
  GenericType
}

TypeName {
  ~annotations (
    capitalIdentifier ~identifier |
    [@dynamicPrecedence=-1] { identifier ~identifier }
  )
}

Identifier {
  identifier ~identifier |
  [@dynamicPrecedence=-1] { capitalIdentifier ~identifier }
}

Definition {
  identifier ~identifier |
  capitalIdentifier ~identifier
}

ScopedTypeName {
  (TypeName | ScopedTypeName | GenericType) !scope "." annotation* TypeName
}

GenericType[@dynamicPrecedence=1] {
  (TypeName | ScopedTypeName) !typeArgs TypeArguments
}

ArrayType {
  unannotatedType !array Dimension+
}

methodHeader {
  (TypeParameters annotation*)? unannotatedType methodDeclarator Throws?
}

methodDeclarator {
  Definition Arguments Dimension*
}

Arguments {
  "(" commaSep<Parameter> ")"
}

Parameter {
  Modifiers? unannotatedType? Definition ("=" expression)?
}

Throws {
  kw<"throws"> commaSep1<type>
}

LocalVariableDeclaration {
  Modifiers? (ckw<"var"> | unannotatedType) commaSep1<VariableDeclarator> ";"
}

MethodDeclaration {
  Modifiers? methodHeader (Block | ";")
}

kw<term> { @specialize[@name={term}]<identifier, term> }

ckw<term> { @extend[@name={term}]<identifier, term> }

commaSep<expr> { (expr ("," expr)*)? }

commaSep1<expr> { expr ("," expr)* }

commaSepTrailing<expr> { (expr ("," expr?)*)? }

commaSep1Trailing<expr> { expr ("," expr?)* }

@skip { LineComment | BlockComment | whitespace }

@tokens {
  whitespace {
    @whitespace+
  }

  digits {
    $[0-9]+ ("_"+ $[0-9]+)*
  }

  hexDigits {
    $[A-Fa-f0-9]+ ("_" $[A-Fa-f0-9]+)*
  }

  IntegerLiteral {
    (digits |
     ("0x" | "0X") hexDigits |
     ("0o" | "0O") $[0-7]+ ("_" $[0-7]+)* |
     ("0b" | "0B") $[01]+ ("_" $[01]+)*)
    ("l" | "L")?
  }

  exponent {
    $[eE] ("-" | "+")? digits
  }

  hexExponent {
    $[pP] ("-" | "+")? digits
  }

  floatSuffix {
    $[fFdD]
  }

  FloatingPointLiteral {
    digits ("." digits? exponent? floatSuffix? | exponent floatSuffix? | floatSuffix) |
    "." digits exponent? floatSuffix? |
    ("0x" | "0X") (hexDigits ("." hexDigits?)? | "." hexDigits) hexExponent floatSuffix?
  }

  @precedence { FloatingPointLiteral, IntegerLiteral }

  CharacterLiteral[isolate] {
    "'" (![\\'\n] | "\\" ("'" | "\\" | ![\n\\']+)) "'"
  }
  StringLiteral[isolate] {
    "\"" (![\\"\n] | "\\" (![\n] | "\n"))* "\""
  }
  textBlockStart {
    '"""' $[ \t]* "\n"
  }
  @precedence { textBlockStart, StringLiteral }
  textBlockContent { "\n" | !["\n] textBlockContent? | '"' textBlockQuote }
  textBlockQuote { !["\n] textBlockContent | "\n" | '"' textBlockQuote2 }
  textBlockQuote2 { !["\n] textBlockContent | "\n" }
  textBlockEnd { '"""' }

  Asterisk { "*" }

  identifierChar { @asciiLetter | @digit | $[$_\u{a1}-\u{10ffff}] }

  identifier { $[a-z_$\u{a1}-\u{10ffff}] identifierChar* }

  @precedence { whitespace, identifier }

  capitalIdentifier { $[A-Z] identifierChar* }

  AssignOp {
    ("+" | "-" | "*" | "/" | "&" | "^" | "\\" | "%") "="
  }

  op[@name={name} "Op"]<name, body> { body }

  times[@name=ArithOp] { "*" | "/" | "%" }

  LineComment[isolate] {
    "//" ![\n]*
  }

  BlockComment[isolate] { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  @precedence { LineComment, times }
  @precedence { BlockComment, times }
  @precedence { "b|", identifier }
  @precedence { "b&", identifier }
  @precedence { "b^", identifier }
  @precedence { "b~", identifier }
  @precedence { "b<<", identifier }
  @precedence { "b>>", identifier }
  @precedence { "b>>>", identifier }

  @precedence { "?:", "?" }
  @precedence { "?.", "?" }

  "="[@name=AssignOp]

  "===" "!=="
  "?:" "?." "?" "=>" "->"
  "b|" "b&" "b^" "b~" "b<<" "b>>" "b>>>"

  "{" "}" "(" ")" "[" "]" "." "," ";" ":" "\\"
}

@external propSource BoxLangHighlighting from "./highlight"

@detectDelim
