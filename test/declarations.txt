# local variable

class A {
  public void b() {
    var c = 5;
  }
}

==>

Program(
  ClassDeclaration(class,
    Definition,
    ClassBody(
      "{",
      MethodDeclaration(
        Modifiers(public),
        void,
        Definition,
        Arguments("(", ")"),
        Block(
          "{",
          LocalVariableDeclaration(
            var,
            VariableDeclarator(
              Definition,
              AssignOp,
              IntegerLiteral),
            ";"),
          "}")),
      "}")))


# local array variable

String[] nodeNames = internalCluster().getNodeNames();
Integer[][] inputArrays = new Integer[0x100][];

==>

Program(
  LocalVariableDeclaration(
    ArrayType(
      TypeName,
      Dimension),
    VariableDeclarator(
      Definition,
      AssignOp,
      MethodInvocation(
        MethodInvocation(
          MethodName(Identifier),
          ArgumentList),
        MethodName(Identifier),
        ArgumentList))),
  LocalVariableDeclaration(
    ArrayType(
      TypeName,
      Dimension, Dimension),
    VariableDeclarator(
      Definition,
      AssignOp,
      ArrayCreationExpression(new,
        TypeName,
        Dimension(IntegerLiteral),
        Dimension))))


# single type import declaration

import java.util.Vector;

==>

Program(ImportDeclaration(import,
  ScopedIdentifier(ScopedIdentifier(Identifier, Identifier), Identifier)))


# type_import_on_declaraction

import java.util.*;

==>

Program(ImportDeclaration(import,
  ScopedIdentifier(Identifier, Identifier), Asterisk))


# single static import declaration

import static java.util.Vector;

==>

Program(ImportDeclaration(import, static,
  ScopedIdentifier(
    ScopedIdentifier(Identifier, Identifier),
    Identifier)))


# static import on demand declaration

import static java.util.*;

==>

Program(ImportDeclaration(import, static,
  ScopedIdentifier(Identifier, Identifier),
  Asterisk))


# class declaration

class Point {
}

==>

Program(
  ClassDeclaration(class, Definition, ClassBody))


# class declaration involving public, private, abstract and superclass

public class Point {
}

private class Point {
}

abstract class ColoredPoint extends Point {
}

==>

Program(
  ClassDeclaration(Modifiers(public), class, Definition, ClassBody),
  ClassDeclaration(Modifiers(private), class, Definition, ClassBody),
  ClassDeclaration(Modifiers(abstract), class, Definition, Superclass(extends, TypeName), ClassBody))


# class declaration with implements

public class Dog implements ISpeak {
}

==>

Program(
  ClassDeclaration(
     Modifiers(public), class, Definition,
     SuperInterfaces(implements,InterfaceTypeList(TypeName)), ClassBody))


# class declaration with body

class Point {
  property numeric x;

  void bar() {
    x = 2;
  }
}

==>

Program(
  ClassDeclaration(class,
    Definition,
    ClassBody(
      PropertyDeclaration(property, PropertyBody(PropertyShortForm(PrimitiveType, PropertyName(Identifier)))),
      MethodDeclaration(
        void,
        Definition,
        Arguments("(", ")"),
        Block(
          ExpressionStatement(
            AssignmentExpression(Identifier, AssignOp, IntegerLiteral)))))))


# interface declaration

interface Top {
}

==>

Program(
  InterfaceDeclaration(
    interface,
    Definition,
    InterfaceBody))


# interface declaration with extends

interface Left extends Top {
}

interface Bottom extends Left, Right {}

==>

Program(
  InterfaceDeclaration(
    interface,
    Definition,
    ExtendsInterfaces(extends,InterfaceTypeList(TypeName)),
    InterfaceBody),
  InterfaceDeclaration(
    interface,
    Definition,
    ExtendsInterfaces(extends,InterfaceTypeList(TypeName, TypeName)), InterfaceBody))


# interface with annotation type declaration

@interface SelfRef {}

==>

Program(
  AnnotationTypeDeclaration(Identifier, AnnotationTypeBody))


# function declaration

function calculateAnswer(wingSpan, numberOfEngines, length, grossTons) {
    //do the calculation here
}

==>

Program(
  FunctionDeclaration(
    function,
    Definition,
    Arguments(
      "(",
      Parameter(Definition),
      ",",
      Parameter(Definition),
      ",",
      Parameter(Definition),
      ",",
      Parameter(Definition),
      ")"
    ),
    Block(
      "{",
      LineComment,
      "}"
    )
  )
)

# constructor declaration

class Point {
  property numeric x;
  property numeric y;

  Point(numeric x, numeric y) {
    this.x = x;
    this.y = y;
  }

  Point() {
    this(0, 0);
  }
}

==>

Program(
  ClassDeclaration(class,
    Definition,
    ClassBody(
      "{",
      PropertyDeclaration(
        property,
        PropertyBody(
          PropertyShortForm(
            PrimitiveType,
            PropertyName(Identifier)
          )
        ),
        ";"
      ),
      PropertyDeclaration(
        property,
        PropertyBody(
          PropertyShortForm(
            PrimitiveType,
            PropertyName(Identifier)
          )
        ),
        ";"
      ),
      ConstructorDeclaration(
        Definition,
        Arguments(
          "(",
          Parameter(
            PrimitiveType,
            Definition
          ),
          ",",
          Parameter(
            PrimitiveType,
            Definition
          ),
          ")"
        ),
        ConstructorBody(
          "{",
          ExpressionStatement(
            AssignmentExpression(
              FieldAccess(this, ".", Identifier),
              AssignOp,
              Identifier
            ),
            ";"
          ),
          ExpressionStatement(
            AssignmentExpression(
              FieldAccess(this, ".", Identifier),
              AssignOp,
              Identifier
            ),
            ";"
          ),
          "}"
        )
      ),
      ConstructorDeclaration(
        Definition,
        Arguments("(", ")"),
        ConstructorBody(
          "{",
          ExplicitConstructorInvocation(
            this,
            ArgumentList(
              "(",
              IntegerLiteral,
              ",",
              IntegerLiteral,
              ")"
            ),
            ";"
          ),
          "}"
        )
      ),
      "}"
    )
  )
)

# throws

class Beyonce {
  BufferedReader newReader() throws FileNotFoundException {
    new BufferedReader(new InputStreamReader(new FileInputStream(file), charset));
  }
}

==>

Program(
  ClassDeclaration(class,
    Definition,
      ClassBody(
        MethodDeclaration(
          TypeName,
          Definition,
          Arguments("(", ")"),
          Throws(throws,TypeName),
          Block(
            ExpressionStatement(
              ObjectCreationExpression(new,
                TypeName,
                ArgumentList(
                  ObjectCreationExpression(new,
                    TypeName,
                    ArgumentList(
                      ObjectCreationExpression(new,
                        TypeName,
                        ArgumentList(Identifier)),
                      Identifier))))))))))


# object instantiation

class Point {
  public double Foo() {
    new BufferedWriter();
    Foo.new BufferedWriter();
  }
}

==>

Program(
  ClassDeclaration(class,
    Definition,
    ClassBody(
      MethodDeclaration(
        Modifiers(public),
        PrimitiveType,
        Definition,
        Arguments("(", ")"),
        Block(
          ExpressionStatement(
            ObjectCreationExpression(new,
              TypeName,
              ArgumentList)),
          ExpressionStatement(
            ObjectCreationExpression(
              Identifier, new,
              TypeName,
              ArgumentList)))))))


# variable declaration

class JayZ {
  public void Beyonce() {
    var blue_ivy_carter;
  };
}

==>

Program(
  ClassDeclaration(class,
    Definition,
    ClassBody(
      "{",
      MethodDeclaration(
        Modifiers(public),
        void,
        Definition,
        Arguments("(", ")"),
        Block(
          "{",
          LocalVariableDeclaration(
            var,
            VariableDeclarator(Definition),
            ";"),
          "}")),
      ";",
      "}")))

# function declaration with default parameters - literals

function greet(string name = "World", int count = 1) {
    return "Hello " & name & " (" & count & ")";
}

==>

Program(
  FunctionDeclaration(
    function,
    Definition,
    Arguments(
      Parameter(PrimitiveType, Definition, AssignOp, StringLiteral),
      Parameter(PrimitiveType, Definition, AssignOp, IntegerLiteral)
    ),
    Block(
      ReturnStatement(return, BinaryExpression(BinaryExpression(BinaryExpression(BinaryExpression(StringLiteral, StringConcatOp, Identifier), StringConcatOp, StringLiteral), StringConcatOp, Identifier), StringConcatOp, StringLiteral))
    )
  )
)


# function declaration with default parameters - expressions

function calculate(numeric x, numeric y = x * 2, boolean debug = false) {
    if (debug) {
        writeOutput("Calculating: " & x & " + " & y);
    }
    return x + y;
}

==>

Program(
  FunctionDeclaration(
    function,
    Definition,
    Arguments(
      Parameter(PrimitiveType, Definition),
      Parameter(PrimitiveType, Definition, AssignOp, BinaryExpression(Identifier, ArithOp, IntegerLiteral)),
      Parameter(PrimitiveType, Definition, AssignOp, BooleanLiteral)
    ),
    Block(
      IfStatement(if, ParenthesizedExpression(Identifier), Block(
        ExpressionStatement(MethodInvocation(MethodName(Identifier), ArgumentList(BinaryExpression(BinaryExpression(BinaryExpression(StringLiteral, StringConcatOp, Identifier), StringConcatOp, StringLiteral), StringConcatOp, Identifier))))
      )),
      ReturnStatement(return, BinaryExpression(Identifier, ArithOp, Identifier))
    )
  )
)


# function declaration with mixed default parameters

function processData(
    string data,
    string prefix = "[" & getCurrentDateTime() & "] ",
    array options = [],
    struct config = { verbose: true, timeout: 30 }
) {
    var result = prefix & data;
    if (config.verbose) {
        writeOutput(result);
    }
    return result;
}

==>

Program(
  FunctionDeclaration(
    function,
    Definition,
    Arguments(
      Parameter(PrimitiveType, Definition),
      Parameter(PrimitiveType, Definition, AssignOp, BinaryExpression(BinaryExpression(StringLiteral, StringConcatOp, MethodInvocation(MethodName(Identifier), ArgumentList())), StringConcatOp, StringLiteral)),
      Parameter(PrimitiveType, Definition, AssignOp, ArrayLiteral()),
      Parameter(PrimitiveType, Definition, AssignOp, StructLiteral(StructEntry(Identifier, BooleanLiteral), StructEntry(Identifier, IntegerLiteral)))
    ),
    Block(
      LocalVariableDeclaration(var, VariableDeclarator(Definition, AssignOp, BinaryExpression(Identifier, StringConcatOp, Identifier))),
      IfStatement(if, ParenthesizedExpression(FieldAccess(Identifier, Identifier)), Block(
        ExpressionStatement(MethodInvocation(MethodName(Identifier), ArgumentList(Identifier)))
      )),
      ReturnStatement(return, Identifier)
    )
  )
)


# function declaration with complex default expressions

function createUser(
    string username,
    string email = username & "@example.com",
    string role = getUserDefaultRole(),
    date created = now(),
    struct metadata = {
        source: "api",
        version: getAppVersion(),
        timestamp: getCurrentTimestamp()
    }
) {
    return {
        username: username,
        email: email,
        role: role,
        created: created,
        metadata: metadata
    };
}

==>

Program(
  FunctionDeclaration(
    function,
    Definition,
    Arguments(
      Parameter(PrimitiveType, Definition),
      Parameter(PrimitiveType, Definition, AssignOp, BinaryExpression(Identifier, StringConcatOp, StringLiteral)),
      Parameter(PrimitiveType, Definition, AssignOp, MethodInvocation(MethodName(Identifier), ArgumentList())),
      Parameter(PrimitiveType, Definition, AssignOp, MethodInvocation(MethodName(Identifier), ArgumentList())),
      Parameter(PrimitiveType, Definition, AssignOp, StructLiteral(
        StructEntry(Identifier, StringLiteral),
        StructEntry(Identifier, MethodInvocation(MethodName(Identifier), ArgumentList())),
        StructEntry(Identifier, MethodInvocation(MethodName(Identifier), ArgumentList()))
      ))
    ),
    Block(
      ReturnStatement(return, StructLiteral(
        StructEntry(Identifier, Identifier),
        StructEntry(Identifier, Identifier),
        StructEntry(Identifier, Identifier),
        StructEntry(Identifier, Identifier),
        StructEntry(Identifier, Identifier)
      ))
    )
  )
)


# function with numeric default parameters

function mathOperation(
    numeric a = 0,
    numeric b = 1.5,
    string operation = "add",
    boolean useFloatingPoint = true
) {
    switch (operation) {
        case "add":
            return a + b;
        case "multiply":
            return a * b;
        default:
            return 0;
    }
}

==>

Program(
  FunctionDeclaration(
    function,
    Definition,
    Arguments(
      Parameter(PrimitiveType, Definition, AssignOp, IntegerLiteral),
      Parameter(PrimitiveType, Definition, AssignOp, FloatingPointLiteral),
      Parameter(PrimitiveType, Definition, AssignOp, StringLiteral),
      Parameter(PrimitiveType, Definition, AssignOp, BooleanLiteral)
    ),
    Block(
      SwitchStatement(switch, ParenthesizedExpression(Identifier), SwitchBlock(
        SwitchLabel(case, StringLiteral),
        ReturnStatement(return, BinaryExpression(Identifier, ArithOp, Identifier)),
        SwitchLabel(case, StringLiteral),
        ReturnStatement(return, BinaryExpression(Identifier, ArithOp, Identifier)),
        SwitchLabel(default),
        ReturnStatement(return, IntegerLiteral)
      ))
    )
  )
)


# function with return type

boolean function isValid() {
    return true;
}

==>

Program(
  FunctionDeclaration(
    ReturnType(PrimitiveType),
    function,
    Definition,
    Arguments("(", ")"),
    Block(
      ReturnStatement(return, BooleanLiteral)
    )
  )
)


# public function with return type

public boolean function validate(data) {
    return data != null;
}

==>

Program(
  FunctionDeclaration(
    Modifiers(public),
    ReturnType(PrimitiveType),
    function,
    Definition,
    Arguments(
      "(",
      Parameter(Definition),
      ")"
    ),
    Block(
      "{",
      ReturnStatement(return, BinaryExpression(Identifier, CompareOp, null), ";"),
      "}"
    )
  )
)


# package function (using supported modifier)

package function getData() {
    // helper logic
}

==>

Program(
  FunctionDeclaration(
    Modifiers(package),
    function,
    Definition,
    Arguments("(", ")"),
    Block(
      LineComment
    )
  )
)


# private static function

private static function helper() {
    // helper logic
}

==>

Program(
  FunctionDeclaration(
    Modifiers(private, static),
    function,
    Definition,
    Arguments("(", ")"),
    Block(
      LineComment
    )
  )
)
